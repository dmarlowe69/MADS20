;*********************************;;       DOS 5.1E DISK WEDGE;     DOS MANAGER 5.1E/031583;     EXTENDED BY S S MACHINES;             FROM;      VERSION V5.1/071382;      BY BOB FAIRBAIRN;        COPYRIGHT 1982;  COMMODORE BUSINESS MACHINES;;  DOCUMENTED BY DENTON MARLOWE;;*********************************; VIC20 SYSTEM EQUATES;*********************************; ZERO PAGE FLAGS;*********************************VERCHK = $0A;*********************************; BASIC TEXT AREA POINTERS;*********************************TXTTAB=$2B ;START OF BASIC TEXTVARTAB=$2D ;START OF BASIC STORAGE;*********************************; CHRGET ADDRESSES;*********************************CHRGET=$73 ;BASIC INPUT PROCESSORCHRGOT=$79 ;GET CURRENT CHARACTERTXTPTR=$7A ;CHRGET POINTERPOINTB=$7C ;CHRGET PATCH POINTSPCCHK=$80 ;CHRGET SPACE CHECKCHREXT=$8A ;CHRGET EXIT;*********************************; TEMPORARY STORAGE;*********************************OFFSET=$A5 ;OFFSET INTO COMMANDSSAVA  =$A6 ;ACCUMULATE STORAGESAVX  =$A7 ;X INDEX REG STORAGETEMP  =$C3 ;COUNTER;*********************************; DISK I/O ADDRESS;*********************************STATUS=$90 ;KERNAL I/O STATUSEAL   =$AE ;END OF LOAD ADDRESSFNLEN =$B7 ;LENGHT OF FILENAMESA    =$B9 ;SECONDARY ADDRESSFA    =$BA ;DEVICE NUMBERFNADR =$BB ;POINTER TO FILENAME;*********************************STACK =$0100 ;6502 PROCESSOR STACK;*********************************; BASIC ROM ADDRESSES;*********************************LNKPRG =  $C533 ;$A533 ;RELINK BASIC LINESRUNC   =  $C659 ;$A659 ;SETUP BASICCLEAR  =  $C65E ;$A65E ;CLEARSTXPT  =  $C68E ;$A68E ;SETUP FOR RUNNEWSTT =  $C7AE ;$A7AE ;RUN BASIC PRGSYNERR =  $CF08 ;$AF08 ;SYNTAX ERRORLINPRT =  $DDCD ;$BDCD ;PRINT LINE NUMBER;*********************************; KERNAL ROM ADDRESSES;*********************************KERIO  = $E0F6 ;$E0F9 ; KERNAL I/OSAVET  = $E156 ;$E159 ;SAVE (PARAMS SET)BASSFT = $C480 ;$E386 ;RETURN TO BASICCHRCPY = $E387 ;$E3AB ;ROM COPY OF CHRGETPRT    = $E742 ;$E716 ;PRINT CHARACTERSROPEN = $F495 ;$F3D5 ;OPEN FILEXCLOSE = $F6DA ;$F642 ;CLOSE FILE;*********************************; KERNAL JUMP TABLE;*********************************LISTEN = $FFB1 ;SEND LISTENSECOND = $FF93 ;SEND SECONDCIOUT  = $FFA8 ;SEND CHAR TO SERIALUNLSN  = $FFAE ;SEND UNLISTENTALK   = $FFB4 ;SEND TALKTKSA   = $FF96 ;SEND TALK SECONDACPTR  = $FFA5 ;GET CHAR FROM BUSUNTLK  = $FFAB ;SEND UNTALKSTOP   = $FFE1 ;CHECK STOP KEYGETIN  = $FFE4 ;GET KEYLOAD   = $FFD5 ;LOAD PRGSETMSG = $FF90 ;KERNAL MESSAGESUNTLK  = $FFABREADST = $FFB7;*********************************; ENTRY POINT;*********************************DOSWDG  JMP START;*********************************; SYMBOL VECTORS (HIGH BYTE);*********************************HIHVEC .BYTE >VECTR1 ;%       .BYTE >VECTR2 ;/       .BYTE >VECTR3 ;TOKENED /       .BYTE >VECTR4 ;^       .BYTE >VECTR5 ;TOKENED ^       .BYTE >VECTR6 ;_;       .BYTE >VECTR7 ;       .BYTE >VECTR8 ;       .BYTE >VECTR9 ;;       .BYTE >VECTRA ;;       .BYTE >VECTRB ;XXCC0E .BYTE >VECTRC ;;*********************************; SYMBOL VECTORS (LOW BYTE);*********************************LOWVEC .BYTE <VECTR1 ;%       .BYTE <VECTR2 ;/       .BYTE <VECTR3 ;TOKENED /       .BYTE <VECTR4 ;^       .BYTE <VECTR5 ;TOKENED ^       .BYTE <VECTR6 ;_;       .BYTE <VECTR7 ;       .BYTE <VECTR8 ;       .BYTE <VECTR9 ;;       .BYTE <VECTRA ;;       .BYTE <VECTRB ;XXCC1A .BYTE <VECTRC ;;*********************************; COMMAND SYMBOL TABLE;*********************************SYMBOL .BYTE '%' ;$25       .BYTE '/' ;$2F       .BYTE '&' ;$26       .BYTE $5E ;UP ARROW       .BYTE '=' ;$3D       .BYTE $5F ;LEFT ARROW       .BYTE '@' ;$40       .BYTE '.' ;$2E       .BYTE '>' ;$3E       .BYTE '!' ;$21       .BYTE '@' ;$40SYMBOC .BYTE '@' ;$40;*********************************; BUFFER;*********************************BUFFER .BYTE $53,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA;*********************************; DEVICE NUMBER;*********************************DEVICE .BYTE $08;*********************************; FILENAME SUFIX;*********************************SUFFIX .BYTE '8','4';*********************************; CURRENT SYMBOL;*********************************CURSYM .BYTE '!';*********************************; DOS MANAGER MESSAGE;*********************************MANAGE .BYTE $0D       .BYTE '      DOS MANAGER 5.1E/031583'       .BYTE $0D       .BYTE '  FROM V5.1 BY BOB FAIRBAIRN (C) CBM'       .BYTE $0D       .BYTE '     EXTENDED BY S S MACHINES'       .BYTE $0D;*********************************; MONITOR TRIGGER POINT;*********************************MONTOR  BRK;*********************************; WEDGE CHRGET PATCH;*********************************PATCH  JMP WEDGE;*********************************; WEDGE ACTIVATION ROUTINE;; PATCH INTO CHRGET IN ZEROPAGE,; DEFINE USER'S CURRENT DEVICE; NUMBER, AND PRINT COPYRIGHT;********************************START  LDX #$02S1     LDA PATCH,X       STA POINTB,X       DEX        BPL S1;       LDA FA       STA DEVICE       JMP PRMESS;*********************************; NORMAL ENTRY POINT;; SAVE CHARACTER FROM CHRGET,; THEN CHECK CALLING ADDRESS ON; TOP OF STACK FOR VALID DOS CALL;; VALID CALLING ADDRESSES ARE:;; VIC20 DIRECT  MODE:$C48D-1=$C48C; VIC20 PROGRAM MODE:$C7E7-1=$C7E6;; C64 DIRECT  MODE:$A48D-1=$A48C; C64 PROGRAM MODE:$A7E7-1=$A7E6;;*********************************WEDGE  STA SAVA       STX SAVX       TSX        LDA STACK+1,X       CMP #$E6       BEQ W1       CMP #$8C       BNE COMMON;W1     LDA STACK+2,X       CMP #$C7 ;C64 = #$A7       BEQ FIND       CMP #$C4 ;C64 = #$A4       BNE COMMON;*********************************; CHECK COMMAND AGAINST TABLE;*********************************FIND LDA SAVA       LDX #NUMCMD ;#$0B;F1     CMP SYMBOL,X       BEQ FOUND       DEX        BPL F1;*********************************; MIMIC CHRGET TEST;*********************************COMMON LDA SAVA       LDX SAVX       CMP #$3A      ;':'       BCS NOTCOL;       JMP SPCCHK;NOTCOL JMP CHREXT;*********************************; GOT WEDGE COMMAND;*********************************FOUND STX OFFSET       STA CURSYM       JSR PROCES;*********************************; SET-UP CURRENT FILENAME AND DEV;; SET FILENAME ADDRESS POINTER; TO THE DOS BUFFER, AND SET THE; DEVICE ADDRESS TO THE DOS DEVICE;;*********************************       LDX OFFSET       LDA #<BUFFER ;#$27      ;'''       STA FNADR       LDA #>BUFFER ;#$CC       STA FNADR+1  ;$BC       LDA DEVICE       STA FA;*********************************; RTS TO ROUTINE WITH STACK TRICK;; PUSH THE COMMAND VECTOR ONTO; THE STACK HIGH BYTE THEN LOW; BYTE. THIS VECTOR IS THE ADDRESS; MINUS ONE. THE RTS POPS THE; ADDRESS AS IF IT WERE A RETURN; ADDRESS AND ADDS ONE TO IT.; THEN X INDEX CONTAINS THE OFFSET; TO THE COMMAND FROM ABOVE.;;*********************************       LDA HIHVEC,X       PHA        LDA LOWVEC,X       PHA        RTS ;*********************************; DOS WEDGE MAIN COMMAND ROUTINE;; EXECUTE @ COMMANDS;; THIS ROUTINE EXECUTES COMMANDS; WHICH ARE PRECEEDED WITH THE; COMMAND SYMBOL ("@" OR ">");; THESE COMMANDS INCLUDE:;;  @          DISK DRIVE STATUS;  @$         READ DISK DIRECTORY;  @#DEVICE   CHANGE DOS DEVICE;  @<COMMAND> ANY 1541 DOS COMMAND;  @Q         TERMINATE WEDGE;*********************************COMMD  TYA        BEQ XXCD90;       LDA BUFFER       CMP #$24      ;'$'       BEQ DIRECT       CMP #$30      ;'0'       BCC XXCD5F       CMP #$3A      ;':'       BCS XXCD5F       DEC FNLEN       JMP XXCE7F;********************************XXCD5F CMP #$51      ;'Q'       BNE XXCD66       JMP XXCE6C;********************************XXCD66 CMP #$4E      ;'N'       BEQ XXCD6E       CMP #$53      ;'S'       BNE XXCD71XXCD6E JSR XXCFBD;********************************; SEND COMMAND STRING TO DRIVE;********************************XXCD71 LDA FA       JSR LISTEN       LDA #$6F       STA SA       JSR SECOND       LDY #$00XXCD7F LDA BUFFER,Y       JSR CIOUT       INY        CPY FNLEN       BCC XXCD7F       JSR UNLSN       JMP XXCDAF;********************************; READ DISK ERROR CHANNEL;********************************XXCD90 LDA FA       JSR TALK       LDA #$6F       STA SA       JSR TKSA       LDA #$0DXXCD9E JSR PRT       JSR ACPTR       CMP #$0D       BNE XXCD9E       JSR PRT       JSR UNTLK       NOP XXCDAF JMP CHRGOT;*********************************; LIST DIRECTORY (@$);; COMMAND DEVICE TO TALK, USING; THE LOAD FILE CHANNEL (0),; INPUT BYTES FROM SERIAL BUS; AND PRINT THEM TO THE SCREEN; UNTILL END OF FILE STATUS IS; RECEIVED THEN UNTALK DEVICE.;; THE LISTING OF THE DIRECTORY; TO THE SCREEN MAY BE SUSPENDED; BY PRESSING THE SPACE BAR.; TO RESUME PRESS ANY KEY.; THE LIST MAY BE ABORTED BY; PRESSING THE STOP KEY.;;*********************************DIRECT LDA #$60       STA SA       JSR SROPEN       LDA FA       JSR TALK       LDA SA       JSR TKSA       LDA #$00       STA STATUS;       LDY #$03NEXTLN STY FNLEN       JSR ACPTR       STA TEMP       JSR ACPTR       STA TEMP+1       LDY STATUS       BNE DIROFF;       LDY FNLEN       DEY        BNE NEXTLN;       LDX TEMP       LDA TEMP+1       JSR LINPRT;       LDA #$20      ;' '       JSR PRT;BODY   JSR ACPTR       LDX STATUS       BNE DIROFF       CMP #$00       BEQ FINLIN;       JSR PRT;       JSR STOP       BEQ DIROFF;       JSR GETIN       BEQ BODY;       CMP #$20      ;' '       BNE BODY;PAUSE  JSR GETIN       BEQ PAUSE       BNE BODY;FINLIN LDA #$0D       JSR PRT       LDY #$02       JMP NEXTLN;DIROFF JSR XCLOSE       LDA #$0D       JSR PRT       JMP CHRGOT;*********************************; EXECUTE LOAD (/, % AND ^);; LOAD COMMANDS ARE AS FOLLOWS:;; /FILENAME  RELOCATABLE LOAD INTO;            BASIC TEXT AREA; ^FILENAME  RELOCATABLE LOAD AND;            RUN INTO BASIC AREA; %FILENAME  ABSOLUTE LOAD USING;            SAVED ADDRESS IN FILE;;*********************************LOADER LDX TXTTAB       LDY TXTTAB+1;       JSR FILOPT       CMP #$25      ;'%'       BNE XXCE30       LDA #$01;********************************       .BYTE $2C;********************************XXCE30 LDA #$00       STA SA       LDA VERCHK       JSR LOAD       BCC XXCE3E       JMP KERIO;********************************XXCE3E LDA VERCHK       BEQ XXCE45       JMP $E17B ; C64 = $E17E;********************************XXCE45 JSR READST       AND #$BF       BEQ XXCE4F       JMP $E19C ; C64 = $E19C;********************************XXCE4F LDA CURSYM       CMP #$25      ;'%'       BNE XXCE57       RTS ;********************************XXCE57 STX VARTAB       STY VARTAB+1       JSR CLEAR       LDA CURSYM       CMP #$5E      ;'^'       BNE XXCE68       JMP XXCFB2;********************************XXCE68 JMP $E1A1 ; C64 = $E1A1;********************************       NOP ;********************************; DISABLE WEDGE (@Q);********************************XXCE6C LDX #$02XXCE6E LDA CHRCPY,X       STA POINTB,X       DEX        BPL XXCE6E       JMP CHRGOT;********************************; EXECUTE SAVE COMMAND;********************************       JSR SAVET       JMP $C490 ;$A490;********************************; SET DEVICE NUMBER;********************************XXCE7F LDY FNLEN       LDA BUFFER,Y       AND #$0F       STA DEVICE       DEY        BMI XXCEA0       LDA BUFFER,Y       AND #$0F       TAY        BMI XXCEA0       LDA DEVICE       CLC XXCE98 ADC #$0A       DEY        BNE XXCE98       STA DEVICEXXCEA0 JMP CHRGOT;********************************; PROCESS INPUT LINE INTO BUFFER;********************************PROCES LDY #$00       JSR CHRGET       TAX        BNE XXCEAE       JMP XXCF3A;********************************XXCEAE LDA #$60       STA POINTB       LDA TXTPTR       PHA        LDA TXTPTR+1       PHA        TXA XXCEB9 CMP #$22      ;'"'       BEQ XXCEDB       JSR CHRGET       BNE XXCEB9       PLA        STA TXTPTR+1       PLA        STA TXTPTR       JSR CHRGOT       LDX #$00       CMP #$22      ;'"'       BEQ XXCEDF       NOP        NOP        NOP        NOP        NOP        NOP        LDX #$00       BEQ XXCEE4XXCEDB PLA        PLA        LDX #$00XXCEDF JSR CHRGET       BEQ XXCF3AXXCEE4 CMP #$22      ;'"'       BEQ XXCF3A       CMP #$3D      ;'='       BEQ XXCEF0       CMP #$3A      ;':'       BNE XXCEF2XXCEF0 LDX #$FFXXCEF2 CMP #$5B      ;'['       BEQ XXCF00XXCEF6 STA BUFFER,Y       STA SUFFIX+1       INX        INY        BPL XXCEDFXXCF00 JSR CHRGET       BEQ XXCF33       STA SUFFIX       JSR CHRGET       BEQ XXCF33       CMP #$5D      ;']'       BNE XXCF33       CPX #$10       BCS XXCF33       LDA SUFFIX+1       CMP #$2A      ;'*'       BNE XXCF21       DEY        DEX        LDA #$3F      ;'?';********************************       .BYTE $2C;********************************XXCF21 LDA #$20      ;' 'XXCF23 CPX #$0F       BCS XXCF2E       STA BUFFER,Y       INY        INX        BPL XXCF23XXCF2E LDA SUFFIX       BNE XXCEF6XXCF33 LDX #$4C      ;'L'       STX POINTB       JMP SYNERR;********************************XXCF3A STY FNLEN       LDX #$4C      ;'L'       STX POINTB       JSR CHRGOT       BEQ XXCF4AXXCF45 JSR CHRGET       BNE XXCF45XXCF4A RTS ;********************************; PRINT BANNER MESSAGE;********************************PRMESS LDA TXTPTR+1       CMP #$02       BNE XXCF5E       LDX #$00XXCF53 LDA MANAGE,X       BEQ XXCF5E       JSR PRT       INX        BNE XXCF53XXCF5E RTS ;********************************; CHECK FILE OPERATION; ; = VERIFY; & APPEND;;********************************FILOPT LDA #$00       STA VERCHK       LDA CURSYM       CMP #$3D      ;'='       BNE FT1       LDA #$01       STA VERCHKFT1    CMP #$26      ;'&'       BEQ APEND       RTS ;********************************; APPEND; LOAD START OF BASIC VARIABLES AND; BACK UP TWO BYTES OF BASIC PROGRAMMING; TERMINATING .WORD $0000;********************************APEND SEC        LDA VARTAB       SBC #$02       TAX        LDA VARTAB+1       SBC #$00       TAY        RTS ;********************************; BEGIN PATCH CODE AREA;********************************XXCF7F NOP        .BYTE $00,$00,$00,$00,$00,$00,$00,$00       .BYTE $00,$00,$00,$00,$00,$00,$00,$00       .BYTE $00,$00,$00,$00,$00,$00,$00,$00       .BYTE $00,$00,$00,$00,$00,$00,$00,$00        .BYTE $00,$00,$00,$00,$00,$00,$00,$00        .BYTE $00,$00,$00,$00,$00,$00,$00,$00 ;********************************       NOP XXCFB1 NOP ;********************************; END PATCH CODE AREA;********************************; CLEAN FOR BASIC AFTER LOAD;********************************XXCFB2 LDA #$00       JSR SETMSG       JSR STXPT       JMP NEWSTT;********************************; PRINT ARE YOU SURE TO SCREEN; AND THEN READ RESPONSE Y/N;********************************XXCFBD LDX #$00XXCFBF LDA XXCFDB,X       BEQ XXCFCA       JSR PRT       INX        BNE XXCFBFXXCFCA JSR GETIN       CMP #$4E      ;'N'       BNE XXCFD6       PLA        PLA        JMP XXCDAF;********************************XXCFD6 CMP #$59      ;'Y'       BNE XXCFCA       RTS ;********************************XXCFDB .BYTE 'ARE YOU SURE (Y/N)?'       .BYTE $0D,$00;********************************; SAVE FILE TO DISK;********************************SAVER  LDA BUFFER       CMP #$40       BNE XXCFFA       JSR XXCFBDXXCFFA JSR SAVET       JMP XXCD90;*********************************; DOS COMMAND VECTORS;; THESE EQUATES ARE USED IN THE; SPLIT LOW/HIGH BYTE VECTOR; USED BY THE EXECUTE COMMAND; ROUTINE. DEFINING TABLE IN THIS; IS NECESSARY DUE TO NATURE; OF CBM ASSEMBLER64 CONVENTIONS; NOTE THE VECTORS ARE COMMAND; ADDRESSES MINUS ONE.;;*********************************VECTR1= LOADER-1 ;%VECTR2= LOADER-1 ;/VECTR3= LOADER-1 ;TOKENED /VECTR4= LOADER-1 ;^VECTR5= LOADER-1 ;TOKENED ^VECTR6= SAVER-1  ;_;VECTR7= COMMD-1  ;>VECTR8= COMMD-1  ;TOKENED >VECTR9= COMMD-1  ;@VECTRA= MONTOR-1 ;!VECTRB= COMMD-1  ;@QVECTRC= COMMD-1  ;;*********************************; NUMBER OF PRIMARY COMMANDS;*********************************NUMCMD=SYMBOC-SYMBOL;********************************.END